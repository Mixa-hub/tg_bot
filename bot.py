from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import requests
from datetime import datetime

# üîê API –∫–ª—é—á –≤—ñ–¥ NewsAPI
API_KEY = "94601de32797445c8e6b199554b68a81"
NEWS_URL = "https://newsapi.org/v2/everything"

# üìò /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞", "üåç –°–≤—ñ—Ç"],
        ["üí∞ –ï–∫–æ–Ω–æ–º—ñ–∫–∞", "‚öΩÔ∏è –°–ø–æ—Ä—Ç"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ —Ç–µ–º—É –Ω–æ–≤–∏–Ω üëá", reply_markup=markup
    )

# üÜò /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –º–æ–∂—É —à—É–∫–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è —Ç–µ–±–µ –∑–∞ —Ç–µ–º–∞–º–∏.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –∞–±–æ –≤–≤–µ–¥–∏ —Ç–µ–º—É –≤—Ä—É—á–Ω—É üì∞"
    )

# üì∞ –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ—ó —Ç–µ–º–∏
from datetime import datetime

async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_map = {
        "üá∫üá¶ –£–∫—Ä–∞—ó–Ω–∞": "—É–∫—Ä–∞—ó–Ω–∞",
        "üåç –°–≤—ñ—Ç": "world",
        "üí∞ –ï–∫–æ–Ω–æ–º—ñ–∫–∞": "–µ–∫–æ–Ω–æ–º—ñ–∫–∞",
        "‚öΩÔ∏è –°–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç"
    }

    user_input = update.message.text
    topic = topic_map.get(user_input, user_input)

    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –¥–ª—è "—Å—å–æ–≥–æ–¥–Ω—ñ"
    today = datetime.now().strftime("%Y-%m-%d")

    # –ó–∞–ø–∏—Ç –¥–æ NewsAPI
    params = {
        "q": topic,
        "language": "uk",
        "from": today,
        "sortBy": "publishedAt",
        "pageSize": 5,
        "apiKey": API_KEY
    }

    response = requests.get(NEWS_URL, params=params)
    data = response.json()

    if data.get("status") != "ok":
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω.")
        return

    articles = data.get("articles", [])
    if not articles:
        await update.message.reply_text("üòê –°–≤—ñ–∂–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    messages = []
    for article in articles:
        title = article.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        description = article.get("description", "")
        source = article.get("source", {}).get("name", "")
        url = article.get("url", "")

        # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å, —è–∫—â–æ –≤—ñ–Ω –¥–æ–≤–≥–∏–π
        if description and len(description) > 200:
            description = description[:200] + "..."

        # –§–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        messages.append(
            f"üü¶ <b>{title}</b> ({source})\n"
            f"{description}\n"
            f"{url}"
        )

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω
    await update.message.reply_text("\n\n".join(messages), parse_mode="HTML")



# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token("7891148251:AAGBdvq8SDpx3szIbx9pBBMlMocW9OzTvpg").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_topic))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    app.run_polling()
